<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>–†–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä</title>
  <!-- –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç Inter -->
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap" rel="stylesheet">
  <style>
    /* CSS-–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞ */
    :root {
      --primary-color: #2575fc;
      --secondary-color: #6a11cb;
      --accent-color: #ff6f61;
      --accent-hover: #ff3b2f;
      --background-gradient: linear-gradient(135deg, var(--secondary-color), var(--primary-color));
      --widget-bg: rgba(255, 255, 255, 0.15);
      --text-color: #ffffff;
      --dark-bg-gradient: linear-gradient(135deg, #1a1a1a, #333);
      --dark-widget-bg: rgba(0, 0, 0, 0.3);
    }

    /* –û—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∏–ª—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –ø–ª–∞–≤–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–µ–π –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞ */
    body {
      font-family: 'Inter', Arial, sans-serif;
      background: var(--background-gradient);
      background-size: 400% 400%;
      animation: gradientAnimation 15s ease infinite;
      color: var(--text-color);
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      margin: 0;
      overflow: hidden;
      position: relative;
      transition: background 0.5s ease, color 0.5s ease;
    }

    @keyframes gradientAnimation {
      0% { background-position: 0% 50%; }
      50% { background-position: 100% 50%; }
      100% { background-position: 0% 50%; }
    }

    /* –í–∏–¥–∂–µ—Ç —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º —Å—Ç–µ–∫–ª–∞ –∏ —Ç–æ–Ω–∫–æ–π —Ä–∞–º–∫–æ–π */
    .widget {
      background: var(--widget-bg);
      padding: 2rem;
      border-radius: 15px;
      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
      backdrop-filter: blur(10px);
      text-align: center;
      animation: fadeIn 1.5s ease-in-out;
      position: relative;
      z-index: 2;
      border: 1px solid rgba(255, 255, 255, 0.2);
      transition: background 0.5s ease, box-shadow 0.5s ease;
    }

    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(-20px); }
      to { opacity: 1; transform: translateY(0); }
    }

    /* –°—Ç–∏–ª—å –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ */
    button {
      background: var(--accent-color);
      border: none;
      padding: 0.75rem 1.5rem;
      color: var(--text-color);
      font-size: 1rem;
      border-radius: 25px;
      cursor: pointer;
      transition: background 0.3s ease, transform 0.2s ease;
      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    }

    button:hover {
      background: var(--accent-hover);
      transform: translateY(-2px);
    }

    button:active {
      transform: translateY(0);
    }

    /* –°–∫—Ä—ã—Ç—ã–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–∞–π–ª-–∏–Ω–ø—É—Ç */
    input[type="file"] {
      display: none;
    }

    /* –°—Ç–∏–ª—å –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ */
    .file-upload {
      background: #4CAF50;
      border: none;
      padding: 0.75rem 1.5rem;
      color: white;
      font-size: 1rem;
      border-radius: 25px;
      cursor: pointer;
      transition: background 0.3s ease, transform 0.2s ease;
      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
      margin-bottom: 1rem;
    }

    .file-upload:hover {
      background: #45a049;
      transform: translateY(-2px);
    }

    .file-upload:active {
      transform: translateY(0);
    }

    #countdown {
      font-size: 2rem;
      margin-top: 1rem;
    }
    
    #winner {
      font-size: 3rem;
      margin-top: 1rem;
      color: #ffeb3b;
      animation: zoomIn 1s ease;
      text-transform: uppercase;
      text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
    }

    @keyframes zoomIn {
      from { transform: scale(0); }
      to { transform: scale(1); }
    }

    #congrats {
      font-size: 1.5rem;
      margin-top: 0.5rem;
      color: #fff;
    }

    /* –°—Ç–∏–ª–∏ –¥–ª—è –∏–∫–æ–Ω–∫–∏ Telegram */
    .telegram-icon {
      position: fixed;
      bottom: 20px;
      right: 20px;
      transition: all 0.3s ease;
      filter: drop-shadow(0 2px 4px rgba(0,0,0,0.1));
      z-index: 3;
    }

    .telegram-icon svg {
      width: 50px;
      height: 50px;
      transition: all 0.3s ease;
      fill: #00e1ff;
    }

    .telegram-icon:hover {
      transform: translateY(-3px);
      filter: drop-shadow(0 5px 15px rgba(0,136,204,0.4));
    }

    .telegram-icon:hover svg {
      fill: #00e1ff;
    }

    .telegram-icon:active {
      transform: scale(0.95);
    }

    /* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ç–µ–º—ã */
    .theme-toggle {
      position: fixed;
      top: 20px;
      left: 20px;
      z-index: 3;
    }

    .theme-toggle .switch {
      position: relative;
      display: inline-block;
      width: 60px;
      height: 34px;
    }

    .theme-toggle .switch input {
      opacity: 0;
      width: 0;
      height: 0;
    }

    .theme-toggle .slider {
      position: absolute;
      cursor: pointer;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: #444;
      transition: 0.4s;
      border-radius: 34px;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
    }

    .theme-toggle .slider:before {
      position: absolute;
      content: "";
      height: 26px;
      width: 26px;
      left: 4px;
      bottom: 4px;
      background-color: white;
      transition: 0.4s;
      border-radius: 50%;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
    }

    .theme-toggle input:checked + .slider {
      background-color: #03a9f4;
    }

    .theme-toggle input:checked + .slider:before {
      transform: translateX(26px);
    }

    /* –¢–µ–º–Ω–∞—è —Ç–µ–º–∞ */
    body.dark-theme {
      background: var(--dark-bg-gradient);
      color: #fff;
      animation: none;
    }

    body.dark-theme .widget {
      background: var(--dark-widget-bg);
      box-shadow: 0 8px 32px rgba(255, 255, 255, 0.1);
      border: 1px solid rgba(255, 255, 255, 0.1);
    }

    body.dark-theme button {
      background: #555;
    }

    body.dark-theme button:hover {
      background: #777;
    }

    body.dark-theme .file-upload {
      background: #666;
    }

    body.dark-theme .file-upload:hover {
      background: #888;
    }

    body.dark-theme #winner {
      color: #ffcc00;
    }
  </style>
</head>
<body>
  <div class="widget">
    <h1>–†–æ–∑—ã–≥—Ä—ã—à</h1>
    <label for="file-input" class="file-upload">–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª</label>
    <input type="file" id="file-input" accept=".xlsx, .xls" />
    <button onclick="startCountdown()">–ù–∞—á–∞—Ç—å</button>
    <div id="countdown"></div>
    <div id="result"></div>
    <div id="winner"></div>
    <div id="congrats"></div>
  </div>

  <div class="theme-toggle">
    <label class="switch">
      <input type="checkbox" id="theme-switch" />
      <span class="slider"></span>
    </label>
  </div>

  <!-- –ò–∫–æ–Ω–∫–∞ Telegram -->
  <a href="https://t.me/Dm1IX" target="_blank" class="telegram-icon">
    <svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
      <path d="M12 0C5.373 0 0 5.373 0 12s5.373 12 12 12 12-5.373 12-12S18.627 0 12 0zm5.894 8.221l-1.97 9.28c-.145.658-.537.818-1.084.508l-3-2.21-1.446 1.394c-.14.14-.26.26-.534.26l.2-3.004 5.56-5.022c.24-.213-.054-.334-.373-.121l-6.869 4.326-2.96-.924c-.643-.203-.656-.64.136-.954l11.57-4.458c.538-.196 1.006.128.832.941z"/>
    </svg>
  </a>

  <!-- –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É SheetJS -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
  <!-- –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è –∫–æ–Ω—Ñ–µ—Ç—Ç–∏ -->
  <script src="https://cdn.jsdelivr.net/npm/canvas-confetti@1.6.0/dist/confetti.browser.min.js"></script>
  <script>
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
    const themeSwitch = document.getElementById('theme-switch');
    themeSwitch.addEventListener('change', function() {
      document.body.classList.toggle('dark-theme');
    });

    // –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ (–∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞, –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á—ë—Ç, –≤—ã–±–æ—Ä –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏ –∫–æ–Ω—Ñ–µ—Ç—Ç–∏)
    let workbook;
    let sheetData;

    document.getElementById('file-input').addEventListener('change', function(event) {
      const file = event.target.files[0];
      if (file) {
        const reader = new FileReader();
        reader.onload = function(e) {
          const data = new Uint8Array(e.target.result);
          workbook = XLSX.read(data, { type: 'array' });
          sheetData = XLSX.utils.sheet_to_json(workbook.Sheets[workbook.SheetNames[0]], { header: 1 });
          alert('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!');
        };
        reader.readAsArrayBuffer(file);
      }
    });

    function startCountdown() {
      if (!sheetData || sheetData.length === 0) {
        alert('–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª Excel.');
        return;
      }

      document.getElementById('winner').textContent = '';
      document.getElementById('congrats').textContent = '';

      let count = 10;
      const countdownElement = document.getElementById('countdown');
      countdownElement.textContent = `${count}`;

      const interval = setInterval(() => {
        count--;
        countdownElement.textContent = `${count}`;

        if (count <= 0) {
          clearInterval(interval);
          countdownElement.textContent = '';
          selectWinner();
        }
      }, 1000);
    }

    function selectWinner() {
      const randomRow = sheetData[Math.floor(Math.random() * sheetData.length)];
      const randomCell = randomRow[Math.floor(Math.random() * randomRow.length)];
      const winnerElement = document.getElementById('winner');
      const congratsElement = document.getElementById('congrats');

      winnerElement.textContent = randomCell || '–ü—É—Å—Ç–∞—è —è—á–µ–π–∫–∞';
      congratsElement.textContent = 'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üéâ';

      startConfetti();
    }

    function startConfetti() {
      const duration = 5 * 1000;
      const animationEnd = Date.now() + duration;
      const defaults = { startVelocity: 30, spread: 360, ticks: 60, zIndex: 0 };

      function randomInRange(min, max) {
        return Math.random() * (max - min) + min;
      }

      const interval = setInterval(function() {
        const timeLeft = animationEnd - Date.now();

        if (timeLeft <= 0) {
          return clearInterval(interval);
        }

        const particleCount = 50 * (timeLeft / duration);
        confetti({
          ...defaults,
          particleCount,
          origin: { x: randomInRange(0.1, 0.3), y: Math.random() - 0.2 }
        });
        confetti({
          ...defaults,
          particleCount,
          origin: { x: randomInRange(0.7, 0.9), y: Math.random() - 0.2 }
        });
      }, 250);
    }
  </script>
</body>
</html>
